// Library
#include <iomanip>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <vector> 
#include <queue>
#include<algorithm>
#include <bits/stdc++.h>
using namespace std;

#define MAX_MCS_INDEX 28
#define MAX_RESOURCE_BLOCK 100
#define MAX_NUMBER_OF_UES 12

uint16_t TBSizeArr[MAX_MCS_INDEX + 1][MAX_RESOURCE_BLOCK] =
{
    {
    2,    4,    7,    11,    15,    19,    22,    26,    28,    32,
    36,    41,    43,    47,    49,    53,    57,    61,    63,    67,
    71,    75,    77,    81,    85,    89,    93,    97,    97,    101,
    105,    109,    113,    117,    121,    125,    129,    129,    133,    137,
    141,    145,    149,    153,    157,    157,    161,    165,    169,    173,
    177,    177,    185,    185,    193,    193,    201,    201,    201,    209,
    209,    217,    217,    225,    225,    225,    233,    233,    241,    241,
    249,    249,    253,    261,    261,    261,    269,    269,    277,    277,
    285,    285,    285,    293,    293,    301,    301,    309,    309,    317,
    317,    317,    325,    325,    333,    333,    341,    341,    341,    349,
    }, /* 01 */
    {
    3,    7,    11,    18,    22,    26,    28,    32,    41,    43,
    47,    53,    57,    61,    65,    71,    75,    79,    85,    89,
    93,    97,    101,    109,    113,    117,    121,    125,    129,    133,
    141,    145,    149,    153,    157,    161,    169,    173,    177,    177,
    185,    193,    193,    201,    201,    209,    217,    217,    225,    225,
    233,    233,    241,    249,    249,    253,    261,    261,    269,    269,
    277,    285,    285,    293,    293,    301,    309,    309,    317,    317,
    325,    325,    333,    341,    341,    349,    349,    357,    357,    357,
    373,    373,    373,    389,    389,    389,    405,    405,    405,    405,
    421,    421,    421,    437,    437,    437,    437,    453,    453,    453
    }, /* 02 */
    {
    4,    9,    18,    22,    26,    32,    37,    41,    47,    53,
    59,    65,    71,    77,    81,    87,    93,    97,    105,    109,
    117,    121,    125,    133,    137,    145,    149,    157,    161,    165,
    173,    177,    185,    193,    193,    201,    209,    209,    217,    225,
    225,    233,    241,    249,    253,    261,    261,    269,    277,    277,
    285,    293,    293,    301,    309,    317,    317,    325,    333,    333,
    341,    349,    357,    357,    357,    373,    373,    389,    389,    389,
    405,    405,    405,    421,    421,    421,    437,    437,    437,    453,
    453,    453,    469,    469,    485,    485,    485,    501,    501,    501,
    517,    517,    517,    533,    533,    533,    549,    549,    549,    573,
    }, /* 03 */
    {
    5,    13,    22,    26,    32,    41,    49,    55,    63,    71,
    77,    85,    93,    101,    109,    113,    121,    129,    137,    145,
    153,    157,    165,    173,    177,    185,    193,    201,    209,    217,
    225,    233,    241,    249,    253,    261,    269,    277,    285,    293,
    301,    309,    317,    317,    325,    333,    341,    349,    357,    357,
    373,    373,    389,    389,    405,    405,    421,    421,    437,    437,
    453,    453,    453,    469,    469,    485,    485,    501,    501,    517,
    517,    533,    533,    549,    549,    549,    573,    573,    573,    597,
    597,    597,    597,    621,    621,    621,    645,    645,    645,    669,
    669,    669,    669,    693,    693,    693,    717,    717,    717,    717,
    }, /* 04 */
    {
    7,    15,    26,    32,    41,    51,    61,    69,    79,    87,
    97,    105,    113,    125,    133,    141,    149,    161,    169,    177,
    185,    193,    201,    217,    225,    233,    241,    249,    261,    269,
    277,    285,    293,    301,    309,    325,    333,    341,    349,    357,
    373,    373,    389,    389,    405,    405,    421,    437,    437,    453,
    453,    469,    469,    485,    501,    501,    517,    517,    533,    533,
    549,    549,    573,    573,    573,    597,    597,    621,    621,    621,
    645,    645,    645,    669,    669,    693,    693,    693,    717,    717,
    717,    749,    749,    749,    749,    775,    775,    775,    807,    807,
    807,    807,    839,    839,    839,    871,    871,    871,    871,    903,
    }, /* 05 */
    {
    41,    22,    32,    49,    63,    75,    89,    101,    117,    129,
    141,    153,    169,    185,    193,    209,    217,    233,    249,    261,
    277,    285,    301,    309,    325,    341,    349,    373,    373,    389,
    405,    421,    437,    437,    453,    469,    485,    501,    517,    517,
    533,    549,    573,    573,    597,    597,    621,    621,    645,    645,
    669,    669,    693,    717,    717,    749,    749,    749,    775,    775,
    807,    807,    807,    839,    839,    871,    871,    871,    903,    903,
    935,    935,    967,    967,    967,    999,    999,    1031,    1031,    1031,
    1063,    1063,    1095,    1095,    1095,    1143,    1143,    1143,    1143,    1191,
    1191,    1191,    1191,    1239,    1239,    1239,    1287,    1287,    1287,    1287,
    }, /* 06 */
    {
    13,    28,    41,    59,    73,    89,    105,    121,    137,    153,
    165,    185,    201,    209,    225,    241,    261,    277,    293,    309,
    317,    333,    349,    373,    389,    405,    421,    421,    437,    453,
    469,    485,    501,    517,    533,    549,    573,    573,    597,    621,
    621,    645,    669,    669,    693,    717,    717,    749,    749,    775,
    775,    807,    807,    839,    839,    839,    871,    871,    903,    903,
    935,    935,    967,    967,    999,    999,    1031,    1031,    1063,    1063,
    1095,    1095,    1095,    1143,    1143,    1143,    1191,    1191,    1191,    1239,
    1239,    1239,    1287,    1287,    1287,    1335,    1335,    1335,    1383,    1383,
    1383,    1431,    1431,    1431,    1431,    1479,    1479,    1479,    1527,    1527,
    }, /* 07 */
    {
    15,    32,    49,    67,    85,    101,    121,    137,    157,    173,
    193,    209,    225,    241,    261,    277,    293,    317,    333,    349,
    373,    389,    405,    421,    437,    453,    469,    485,    501,    533,
    549,    573,    573,    597,    621,    621,    645,    669,    693,    693,
    717,    749,    749,    775,    775,    807,    807,    839,    871,    871,
    903,    903,    935,    935,    967,    967,    999,    999,    1031,    1063,
    1063,    1095,    1095,    1143,    1143,    1143,    1191,    1191,    1191,    1239,
    1239,    1239,    1287,    1287,    1335,    1335,    1335,    1383,    1383,    1383,
    1431,    1431,    1431,    1479,    1479,    1527,    1527,    1527,    1572,    1572,
    1572,    1620,    1620,    1620,    1692,    1692,    1692,    1692,    1764,    1764,
    }, /* 08 */
    {
    17,    37,    57,    77,    97,    117,    137,    157,    177,    193,
    217,    233,    253,    277,    293,    317,    333,    357,    373,    389,
    421,    437,    453,    469,    501,    517,    533,    549,    573,    597,
    621,    645,    645,    669,    693,    717,    717,    749,    775,    775,
    807,    839,    839,    871,    871,    903,    935,    935,    967,    999,
    999,    1031,    1031,    1063,    1095,    1095,    1143,    1143,    1143,    1191,
    1191,    1239,    1239,    1287,    1287,    1287,    1335,    1335,    1383,    1383,
    1383,    1431,    1431,    1479,    1479,    1479,    1527,    1527,    1572,    1572,
    1620,    1620,    1620,    1692,    1692,    1692,    1692,    1764,    1764,    1764,
    1764,    1836,    1836,    1836,    1908,    1908,    1908,    1908,    1980,    1980,
    }, /* 09 */
    {
    18,    41,    63,    85,    109,    129,    153,    173,    193,    217,
    241,    261,    285,    309,    333,    349,    373,    389,    421,    437,
    469,    485,    501,    533,    549,    573,    597,    621,    645,    669,
    693,    717,    717,    749,    775,    775,    807,    839,    839,    871,
    903,    935,    935,    967,    999,    999,    1031,    1063,    1063,    1095,
    1143,    1143,    1143,    1191,    1191,    1239,    1239,    1287,    1287,    1335,
    1335,    1383,    1383,    1431,    1431,    1431,    1479,    1479,    1527,    1527,
    1572,    1572,    1620,    1620,    1620,    1692,    1692,    1692,    1764,    1764,
    1764,    1836,    1836,    1836,    1836,    1908,    1908,    1908,    1980,    1980,
    1980,    2052,    2052,    2052,    2124,    2124,    2124,    2124,    2196,    2196,
    }, /* 10 */

    {
    26,    55,    85,    113,    141,    169,    201,    225,    253,    285,
    309,    341,    373,    405,    421,    453,    485,    517,    549,    573,
    597,    621,    669,    693,    717,    749,    775,    807,    839,    839,
    871,    903,    935,    967,    999,    1031,    1063,    1095,    1095,    1143,
    1191,    1191,    1239,    1239,    1287,    1335,    1335,    1383,    1383,    1431,
    1479,    1479,    1527,    1527,    1572,    1572,    1620,    1620,    1692,    1692,
    1764,    1764,    1764,    1836,    1836,    1908,    1908,    1908,    1980,    1980,
    2052,    2052,    2052,    2124,    2124,    2196,    2196,    2196,    2292,    2292,
    2292,    2385,    2385,    2385,    2385,    2481,    2481,    2481,    2577,    2577,
    2577,    2673,    2673,    2673,    2673,    2769,    2769,    2769,    2865,    2865,
    }, /* 11 */
    {
    28,    61,    93,    125,    157,    193,    225,    253,    285,    317,
    357,    389,    421,    453,    485,    517,    549,    573,    621,    645,
    669,    717,    749,    775,    807,    839,    871,    903,    935,    967,
    999,    1031,    1063,    1095,    1143,    1143,    1191,    1239,    1239,    1287,
    1335,    1335,    1383,    1431,    1431,    1479,    1527,    1527,    1572,    1620,
    1620,    1692,    1692,    1764,    1764,    1836,    1836,    1836,    1908,    1908,
    1980,    1980,    2052,    2052,    2124,    2124,    2124,    2196,    2196,    2292,
    2292,    2292,    2385,    2385,    2385,    2481,    2481,    2481,    2577,    2577,
    2577,    2673,    2673,    2673,    2769,    2769,    2769,    2865,    2865,    2865,
    2961,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3182
    }, /* 12 */
    {
    32,    69,    105,    141,    177,    217,    249,    285,    325,    357,
    389,    437,    469,    501,    533,    573,    621,    645,    693,    717,
    749,    775,    807,    871,    903,    935,    967,    999,    1031,    1063,
    1095,    1143,    1191,    1239,    1239,    1287,    1335,    1383,    1383,    1431,
    1479,    1527,    1527,    1572,    1620,    1620,    1692,    1692,    1764,    1764,
    1836,    1836,    1908,    1908,    1980,    1980,    2052,    2052,    2124,    2124,
    2196,    2196,    2292,    2292,    2292,    2385,    2385,    2481,    2481,    2481,
    2577,    2577,    2577,    2673,    2673,    2769,    2769,    2769,    2865,    2865,
    2865,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3182,
    3302,    3302,    3302,    3422,    3422,    3422,    3542,    3542,    3542,    3542,
    }, /* 13 */
    {
    35,    75,    113,    153,    193,    225,    269,    309,    341,    389,
    421,    453,    501,    533,    573,    621,    645,    693,    717,    775,
    807,    839,    871,    903,    967,    999,    1031,    1063,    1095,    1143,
    1191,    1239,    1287,    1287,    1335,    1383,    1431,    1479,    1479,    1527,
    1572,    1620,    1620,    1692,    1692,    1764,    1836,    1836,    1908,    1908,
    1980,    1980,    2052,    2052,    2124,    2124,    2196,    2196,    2292,    2292,
    2292,    2385,    2385,    2481,    2481,    2577,    2577,    2577,    2673,    2673,
    2769,    2769,    2769,    2865,    2865,    2961,    2961,    2961,    3062,    3062,
    3062,    3182,    3182,    3182,    3302,    3302,    3302,    3422,    3422,    3422,
    3542,    3542,    3542,    3662,    3662,    3662,    3662,    3822,    3822,    3822
    }, /* 14 */
    {
    41,    79,    121,    161,    201,    241,    285,    325,    373,    405,
    453,    485,    533,    573,    621,    645,    693,    749,    775,    807,
    839,    903,    935,    967,    999,    1063,    1095,    1143,    1191,    1239,
    1239,    1287,    1335,    1383,    1431,    1479,    1527,    1527,    1572,    1620,
    1692,    1692,    1764,    1764,    1836,    1836,    1908,    1980,    1980,    2052,
    2052,    2124,    2124,    2196,    2196,    2292,    2292,    2385,    2385,    2481,
    2481,    2481,    2577,    2577,    2673,    2673,    2769,    2769,    2769,    2865,
    2865,    2961,    2961,    3062,    3062,    3062,    3182,    3182,    3182,    3302,
    3302,    3302,    3422,    3422,    3422,    3542,    3542,    3542,    3662,    3662,
    3662,    3822,    3822,    3822,    3822,    3963,    3963,    3963,    3963,    4107
    }, /* 15 */

    {
    47,    97,    145,    193,    249,    293,    349,    389,    453,    501,
    549,    597,    645,    693,    749,    775,    839,    903,    935,    999,
    1031,    1095,    1143,    1191,    1239,    1287,    1335,    1383,    1431,    1479,
    1527,    1572,    1620,    1692,    1764,    1764,    1836,    1908,    1908,    1980,
    2052,    2052,    2124,    2196,    2196,    2292,    2292,    2385,    2385,    2481,
    2481,    2577,    2673,    2673,    2769,    2769,    2865,    2865,    2961,    2961,
    3062,    3062,    3062,    3182,    3182,    3302,    3302,    3422,    3422,    3422,
    3542,    3542,    3662,    3662,    3662,    3822,    3822,    3822,    3963,    3963,
    3963,    4107,    4107,    4107,    4251,    4251,    4251,    4395,    4395,    4395,
    4587,    4587,    4587,    4736,    4736,    4736,    4736,    4904,    4904,    4904
    }, /* 16 */
    {
    51,    105,    161,    217,    269,    325,    373,    437,    485,    533,
    597,    645,    693,    749,    807,    871,    903,    967,    1031,    1063,
    1143,    1191,    1239,    1287,    1335,    1383,    1431,    1527,    1572,    1620,
    1692,    1692,    1764,    1836,    1908,    1908,    1980,    2052,    2124,    2124,
    2196,    2292,    2292,    2385,    2385,    2481,    2577,    2577,    2673,    2673,
    2769,    2769,    2865,    2865,    2961,    3062,    3062,    3182,    3182,    3182,
    3302,    3302,    3422,    3422,    3542,    3542,    3662,    3662,    3662,    3822,
    3822,    3822,    3963,    3963,    4107,    4107,    4107,    4251,    4251,    4251,
    4395,    4395,    4395,    4587,    4587,    4587,    4736,    4736,    4736,    4904,
    4904,    4904,    5072,    5072,    5072,    5072,    5296,    5296,    5296,    5477
    }, /* 17 */
    {
    55,    113,    173,    233,    293,    349,    405,    469,    517,    573,
    645,    693,    749,    807,    871,    935,    999,    1031,    1095,    1143,
    1239,    1287,    1335,    1383,    1431,    1527,    1572,    1620,    1692,    1764,
    1836,    1836,    1908,    1980,    2052,    2124,    2124,    2196,    2292,    2292,
    2385,    2481,    2481,    2577,    2577,    2673,    2769,    2769,    2865,    2865,
    2961,    3062,    3062,    3182,    3182,    3302,    3302,    3422,    3422,    3542,
    3542,    3662,    3662,    3662,    3822,    3822,    3963,    3963,    3963,    4107,
    4107,    4251,    4251,    4251,    4395,    4395,    4395,    4587,    4587,    4587,
    4736,    4736,    4904,    4904,    4904,    5072,    5072,    5072,    5296,    5296,
    5296,    5296,    5477,    5477,    5477,    5669,    5669,    5669,    5861,    5861
    }, /* 18 */
    {
    61,    125,    185,    249,    309,    373,    437,    501,    573,    621,
    693,    749,    807,    871,    935,    999,    1063,    1143,    1191,    1239,
    1335,    1383,    1431,    1527,    1572,    1620,    1692,    1764,    1836,    1908,
    1980,    1980,    2052,    2124,    2196,    2292,    2292,    2385,    2481,    2481,
    2577,    2673,    2673,    2769,    2865,    2865,    2961,    3062,    3062,    3182,
    3182,    3302,    3302,    3422,    3422,    3542,    3542,    3662,    3662,    3822,
    3822,    3963,    3963,    3963,    4107,    4107,    4251,    4251,    4395,    4395,
    4395,    4587,    4587,    4587,    4736,    4736,    4904,    4904,    4904,    5072,
    5072,    5072,    5296,    5296,    5296,    5477,    5477,    5477,    5669,    5669,
    5669,    5861,    5861,    5861,    5861,    6117,    6117,    6117,    6117,    6378
    }, /* 19 */
    {
    65,    133,    201,    269,    333,    405,    469,    533,    597,    669,
    749,    807,    871,    935,    999,    1063,    1143,    1191,    1287,    1335,
    1431,    1479,    1572,    1620,    1692,    1764,    1836,    1908,    1980,    2052,
    2124,    2124,    2196,    2292,    2385,    2385,    2481,    2577,    2673,    2673,
    2769,    2865,    2865,    2961,    3062,    3062,    3182,    3182,    3302,    3422,
    3422,    3542,    3542,    3662,    3662,    3822,    3822,    3963,    3963,    4107,
    4107,    4251,    4251,    4251,    4395,    4395,    4587,    4587,    4587,    4736,
    4736,    4904,    4904,    5072,    5072,    5072,    5296,    5296,    5296,    5477,
    5477,    5477,    5669,    5669,    5669,    5861,    5861,    5861,    6117,    6117,
    6117,    6117,    6378,    6378,    6378,    6378,    6594,    6594,    6594,    6882
    }, /* 20 */

    {
    73,    149,    225,    301,    373,    453,    533,    621,    693,    749,
    839,    903,    999,    1063,    1143,    1239,    1287,    1383,    1431,    1527,
    1620,    1692,    1764,    1836,    1908,    1980,    2052,    2124,    2196,    2292,
    2385,    2481,    2481,    2577,    2673,    2769,    2865,    2865,    2961,    3062,
    3182,    3182,    3302,    3302,    3422,    3542,    3542,    3662,    3662,    3822,
    3963,    3963,    4107,    4107,    4251,    4251,    4395,    4395,    4587,    4587,
    4587,    4736,    4736,    4904,    4904,    5072,    5072,    5296,    5296,    5296,
    5477,    5477,    5669,    5669,    5669,    5861,    5861,    5861,    6117,    6117,
    6117,    6378,    6378,    6378,    6594,    6594,    6594,    6594,    6882,    6882,
    6882,    7167,    7167,    7167,    7167,    7407,    7407,    7407,    7708,    7708
    },/* 21 */
    {
    77,    157,    233,    317,    389,    469,    549,    645,    717,    775,
    871,    935,    1031,    1095,    1191,    1287,    1335,    1431,    1527,    1572,
    1692,    1764,    1836,    1908,    1980,    2052,    2124,    2196,    2292,    2385,
    2481,    2577,    2577,    2673,    2769,    2865,    2961,    3062,    3062,    3182,
    3302,    3302,    3422,    3542,    3542,    3662,    3662,    3822,    3963,    3963,
    4107,    4107,    4251,    4251,    4395,    4395,    4587,    4587,    4736,    4736,
    4904,    4904,    5072,    5072,    5072,    5296,    5296,    5477,    5477,    5477,
    5669,    5669,    5861,    5861,    5861,    6117,    6117,    6117,    6378,    6378,
    6378,    6594,    6594,    6594,    6882,    6882,    6882,    6882,    7167,    7167,
    7167,    7407,    7407,    7407,    7708,    7708,    7708,    7708,    7972,    7972
    },/* 22 */
    {
    89,    185,    277,    373,    469,    549,    645,    749,    839,    935,
    1031,    1095,    1191,    1287,    1383,    1479,    1572,    1692,    1764,    1836,
    1908,    2052,    2124,    2196,    2292,    2385,    2481,    2577,    2673,    2769,
    2865,    2961,    3062,    3182,    3182,    3302,    3422,    3542,    3662,    3662,
    3822,    3822,    3963,    4107,    4107,    4251,    4395,    4395,    4587,    4587,
    4736,    4736,    4904,    5072,    5072,    5072,    5296,    5296,    5477,    5477,
    5669,    5669,    5861,    5861,    6117,    6117,    6117,    6378,    6378,    6594,
    6594,    6594,    6882,    6882,    6882,    6882,    7167,    7167,    7167,    7407,
    7407,    7407,    7708,    7708,    7708,    7972,    7972,    7972,    8324,    8324,
    8324,    8601,    8601,    8601,    8889,    8889,    8889,    9214,    9214,    9422
    },/* 23 */
    {
    81,     165,     249,       333,    421,    501,    573,    669,    749,    839,
    903,    999,    1063,       1143,   1239,   1335,   1431,   1479,   1572,   1620,
    1764,   1836,   1908,       1980,   2052,   2124,   2196,   2292,   2385,   2481,
    2577,   2673,   2769,       2865,   2865,   2961,   3062,   3182,   3182,   3302,
    3422,   3422,   3542,       3662,   3662,   3822,   3963,   3963,   4107,   4107,
    4251,   4251,   4395,       4395,   4587,   4587,   4736,   4736,   4904,   4904,
    5072,   5072,   5296,       5296,   5477,   5477,   5477,   5669,   5669,   5861,   
    5861,   5861,   6117,       6117,   6117,   6378,   6378,   6378,   6594,   6594,   
    6594,   6882,   6882,       6882,   7167,   7167,   7167,   7407,   7407,   7407,
    7407,   7708,   7708,       7708,   7972,   7972,   7972,   7972,   8324,   8324
    },/* 24 */
    {
    85,     173,    261,    349,    437,    533,    621,    693,    775,    871,    
    967,    1063,   1143,   1239,   1335,   1383,   1479,   1572,   1692,   1764,
    1836,   1908,   2052,   2124,   2196,   2292,   2385    ,2481,  2577,   2673,
    2769,   2769,   2865,   2961,   3062,   3182,   3302,   3302,   3422,   3542,
    3662,   3662,   3822,   3822,   3963,   4107,   4107,   4251,   4251,   4395,
    4395,   4587,   4587,   4736,   4904,   4904,   5072,   5072,   5296,   5296,
    5296,   5477,   5477,   5669,   5669,   5861,   5861,   5861,   6117,   6117,
    6117,   6378,   6378,   6594,   6594,   6594,   6882,   6882,   6882,   7167,
    7167,   7167,   7407,   7407,   7407,   7708,   7708,   7708,   7708,   7972,
    7972,   7972,   8324,   8324,   8324,   8324,   8601,   8601,   8601,   8889    
    },/* 25 */
    {
    101,    201,    309,    405,    517,    621,    717,    807,    935,    1031,
    1143,   1239,   1335,   1431,   1527,   1620,   1764,   1836,   1980,   2052,
    2196,   2292,   2385,   2481,   2577,   2673,   2769,   2865,   2961,   3062,
    3182,   3302,   3422,   3542,   3662,   3662,   3822,   3963,   3963,   4107,
    4251,   4395,   4395,   4587,   4587,   4736,   4904,   4904,   5072,   5072,
    5296,   5296,   5477,   5669,   5669,   5861,   5861,   5861,   6117,   6117,
    6378,   6378,   6594,   6594,   6594,   6882,   6882,   6882,   7167,   7167,   
    7407,   7407,   7407,   7708,   7708,   7972,   7972,   7972,   8324,   8324,
    8324,   8601,   8601,   8601,   8889,   8889,   8889,   9214,   9214,   9214,
    9422,   9526,   9526,   9838,   9838,   9838,   10147,  10147,  10147,  10147    
    },/* 26 */
    {
    121,    249,    373,    501,    621,    749,    871,    999,    1095,   1239,
    1335,   1479,   1620,   1692,   1836,   1980,   2124,   2196,   2385,   2481,
    2577,   2673,   2865,   2961,   3062,   3182,   3302,   3422,   3542,   3662,
    3822,   3963,   4107,   4251,   4395,   4395,   4587,   4736,   4904,   4904,
    5072,   5072,   5296,   5477,   5477,   5669,   5861,   5861,   6117,   6117,
    6378,   6378,   6594,   6594,   6882,   6882,   7167,   7167,   7407,   7407,
    7407,   7708,   7708,   7972,   7972,   7972,   8324,   8324,   8601,   8601,
    8889,   8889,   8889,   9214,   9422,   9526,   9526,   9526,   9838,   9838,
    10147,  10147,  10147,  10147,  10595,  10595,  10595,  10992,  10992,  10992,
    11352,  11352,  11352,  11725,  11725,  11725,  11725,  12237,  12237,  12237    
    },/* 27 */
    {
    129,    261,    390,    533,    645,    775,    903,    1063,   1191,   1287,
    1431,   1572,   1692,   1836,   1980,   2124,   2196,   2385,   2481,   2577,
    2769,   2865,   3062,   3182,   3302,   3422,   3542,   3662,   3822,   3963,
    4107,   4251,   4395,   4395,   4587,   4736,   4904,   4904,   5072,   5296,
    5296,   5477,   5669,   5861,   5861,   6117,   6117,   6378,   6378,   6594,
    6594,   6882,   6882,   7167,   7167,   7407,   7407,   7708,   7708,   7972,
    7972,   7972,   8324,   8324,   8601,   8601,   8889,   8889,   8889,   9214,
    9422,   9526,   9526,   9838,   9838,   9838,   10147,  10147,  10147,  10595,  
    10595,  10595,  10992,  10992,  10992,  11352,  11352,  11725,  11725,  11725,
    11725,  12237,  12237,  12237,  12237,  12730,  12730,  12730,  13191,  13191    
    }/* 28 */
};


class UserEnd
{
    //Constants
    public:
    int MCS;
    int index;
    int NumberOfRBScheduled;
    int NumberOfTTIScheduled;
    int Delay;
    int AverageDelay;
    int MaxDelay;
    double AverageMCS;
    double Throughput;
    double AverageThroughput;
    double Priority;
    double TotalBitsTrx;
    double TotalRBsScheduled;
    bool Scheduled;

    //Constructors
    UserEnd()
    {
        MCS = 0;
        index = 0;
        AverageMCS = 0;
        NumberOfRBScheduled = 0;
        TotalRBsScheduled = 0;
        NumberOfTTIScheduled = 0;
        Throughput = 0;
        TotalBitsTrx = 0;
        Delay = 0;
        AverageDelay = 0;
        MaxDelay = 0;
        AverageThroughput = 0;
        Priority = 0;
        Scheduled = false;
    }; 

    UserEnd(int index_, int MCS_)
    {
        MCS = MCS_;
        index = index_;
        AverageMCS = 0;
        NumberOfRBScheduled = 0;
        TotalRBsScheduled = 0;
        NumberOfTTIScheduled = 0;
        Throughput = 0;
        TotalBitsTrx = 0;
        Delay = 0;
        AverageDelay = 0;
        MaxDelay = 0;
        AverageThroughput = 0;
        Priority = 0;
        Scheduled = false;
    }; 
}UE;

class gNodeB 
{
    public:
    double CellTotalBitsTrx;
    double CellAvgThroughput;
};

class Scheduler {
private:
    int TTI = 0; //Transmission Time Interval
    int num_rbs = MAX_RESOURCE_BLOCK; // Number of Resource Blocks available per TTI
    gNodeB Cell; // Cell Data
    vector<UserEnd> ues; // List of UEs
    queue<int> ue_queue; // Queue to keep track of UserEnd scheduling order

public:
    Scheduler(const vector<UserEnd>& ues) : ues(ues) {
        for (size_t i = 0; i < ues.size(); ++i) {
            ue_queue.push(i);
        }
    }

    void calculateDataRate() {
        for (UserEnd& ue : ues)
        {
        // Caclculate the datarate in Megabits/sec
            if(ue.Scheduled = true && ue.NumberOfTTIScheduled != 0 ) {
                ue.TotalBitsTrx = ue.NumberOfTTIScheduled * TBSizeArr[ue.MCS][(ue.NumberOfRBScheduled-1)] * 8; // Total Transmitted Bits 
                ue.Throughput = ue.TotalBitsTrx/(TTI*1000); // Calculate Throughput using Total Transmitted Bits / TTI 
                ue.AverageThroughput = (ue.AverageThroughput + ue.Throughput) / 2;
                ue.Scheduled = false;
            }else break;
        }
    }

    void calculateCellDataRate() {
        for (UserEnd& ue : ues)
        {
        // Caclculate the datarate in Megabits/sec
            Cell.CellTotalBitsTrx += ue.TotalBitsTrx;
            Cell.CellAvgThroughput = Cell.CellTotalBitsTrx/(TTI*1000);
            
        }
    }

    //Roundrobin Scheduler
    void RR_scheduler() {
        int ue_count = ues.size();
        int scheduled_ues = 0;
        TTI++;

    // Randomize MCS for each UE
        for (UserEnd& ue : ues) {
            ue.AverageMCS += ue.MCS;
        }

    // Algorithm Loop
        while (!ue_queue.empty() && scheduled_ues < 4) {
            int ue_index = ue_queue.front(); 
            ue_queue.pop();
            UserEnd& ue = ues[ue_index];
            
            // Allocate Resource Blocks to this UserEnd
            ue.NumberOfRBScheduled = num_rbs / 4; 
            ue.TotalRBsScheduled += ue.NumberOfRBScheduled;
            ue.NumberOfTTIScheduled++; 
            ue.Delay = 0; 
            ue.Scheduled = true;
            // Move to the next UserEnd in the round-robin queue
            ue_queue.push(ue_index);
            scheduled_ues++;
        }

    //Delay Calculation
        for (UserEnd& ue : ues) {
            if (ue.Scheduled == false) {
                ue.Delay++; 
                ue.AverageDelay += ue.Delay;
                ue.MaxDelay = max(ue.Delay,ue.MaxDelay);
            }
        }
    // Calculate Throughput
        calculateDataRate();
    }

    //MaxCQI Scheduler
    void MaxCQI_scheduler() {

    // Randomize MCS for each UE
        for (UserEnd& ue : ues) {
            if(TTI % 1 == 0 ) {
                if(ue.index < 4) ue.MCS = 20 +  (rand() % 8);
                else if(ue.index < 10) ue.MCS = 10 +  (rand() % 11);
                else ue.MCS = rand() % 10;
            }
        }

    // Sort UEs based on MCS 
        sort(ues.begin(), ues.end(), [](const UserEnd& a, const UserEnd& b) {
            return a.MCS > b.MCS;
        });
        TTI++;

    // Allocate RBs to the top 4 UEs based on MCS
        int scheduled_ue = 0;
        int rb_per_ue = num_rbs / 4; 

    // Algorithm Loop
        for (UserEnd& ue : ues) {
            ue.AverageMCS += ue.MCS;
            if (scheduled_ue < 4) {
                ue.NumberOfRBScheduled = rb_per_ue;
                ue.TotalRBsScheduled += ue.NumberOfRBScheduled;
                ue.NumberOfTTIScheduled++;
                ue.Scheduled = true;
                scheduled_ue++;
                ue.Delay = 0; // Reset delay counter for UEs that got scheduled
            } else {
                ue.Delay++; // Increase delay counter for UEs not scheduled
                ue.AverageDelay += ue.Delay;
                ue.MaxDelay = max(ue.Delay,ue.MaxDelay);
            }
        }

    // Calculate Throughput
        calculateDataRate();

    //Return the UE vector form base on Average MCS
        sort(ues.begin(), ues.end(), [](const UserEnd& a, const UserEnd& b) {
        return a.AverageMCS > b.AverageMCS;
        });
    }


    //Proportional Fair Scheduler
    void PF_scheduler() {
    // Randomize MCS for each UE
        for (UserEnd& ue : ues) {
            if(TTI % 1 == 0 ) {
                if(ue.index < 4) ue.MCS = 20 +  (rand() % 8);
                else if(ue.index < 10) ue.MCS = 10 +  (rand() % 11);
                else ue.MCS = rand() % 10;
            }
        }
    // Calculate the scheduling metric for each UE (Proportional Fair metric)
        for (UserEnd& ue : ues) {
            if (ue.AverageThroughput == 0.0) {
                ue.AverageThroughput = ue.Throughput; // Initialize the average data rate
            }
        }

    // Sort UEs based on the Proportional Fair metric
        sort(ues.begin(), ues.end(), [](UserEnd& a,UserEnd& b) {
            a.Priority = a.Throughput / (a.AverageThroughput + 1); // Avoid division by zero
            b.Priority = b.Throughput / (b.AverageThroughput + 1);
            if(a.Delay > 39) {
                a.Priority = 99;
            } else if(b.Delay > 39) {
                b.Priority = 99;
                return b.Priority < a.Priority;
            }
            return a.Priority > b.Priority;
        });

        // Allocate RBs to the top 4 UEs based on the PF metric
        int scheduled_ues = 0;
        int rb_per_ue = num_rbs / 4; // Allocate an equal number of RBs to each of the top 4 UEs

        for (UserEnd& ue : ues) {
            ue.AverageMCS += ue.MCS;
            if (scheduled_ues < 4) {
                ue.NumberOfRBScheduled = rb_per_ue;
                ue.TotalRBsScheduled += ue.NumberOfRBScheduled;
                ue.NumberOfTTIScheduled++;
                ue.Scheduled = true;
                scheduled_ues++;
                ue.Delay = 0; // Reset delay counter for UEs that got scheduled
            } else {
                ue.Delay++; // Increase delay counter for UEs not scheduled
                ue.AverageDelay += ue.Delay;
                ue.MaxDelay = max(ue.Delay,ue.MaxDelay);
            }
        }


    // Calculate Throughput
        calculateDataRate();

    //Return the UE vector form
        sort(ues.begin(), ues.end(), [](const UserEnd& a, const UserEnd& b) {
        return a.AverageMCS > b.AverageMCS;
        });
        
    // Next TTI
        TTI++;

    }

    void print_allocation()  {
        cout << " Cell Throughput: " << setprecision(4) << setw(5) << Cell.CellAvgThroughput  << " Mbps \n \n" ;
        for (const UserEnd& ue : ues) {
            cout << " At TTI "  << TTI  << " || UserEnd " << setw(2) << ue.index + 1  << " || Average MCS: " << setw(4) << ue.AverageMCS/TTI 
            << " || Average Number of RBs per TTI: " << setw(5) << ue.TotalRBsScheduled/TTI << " RBs " 
            << "|| Number of TTI Scheduled: " << setw(5) << ue.NumberOfTTIScheduled <<  " || Average Throughput: " << setprecision(4) << setw(7) << ue.Throughput
            <<  " Mbps" << " || Average Delay: " << setw(2) << ue.AverageDelay/TTI 
            << " || Max Delay: " << ue.MaxDelay << " TTIs \n";
        } 
    }
    
};

int main()
{
//Constants
    srand( time(NULL) );

    int TTI = 0;
    int simTime = 10000;

    int UserCount = MAX_NUMBER_OF_UES;
    int UserIndex = 0;

    int MCS_value;
    int Scheduler_mode;

// UESetup
    vector<UserEnd> UEs;
    vector<int> mcs_values = {5, 19, 2, 14, 7, 27, 3, 26, 10, 6, 18, 23};

// Define the MCS values for each UE
    while(UserIndex < MAX_NUMBER_OF_UES)
    {
        MCS_value = rand() % 27;
        //MCS_value = mcs_values[UserIndex];
        UEs.emplace_back(UserIndex,MCS_value);
        UserIndex++;
    }

//Create a Scheduler
    Scheduler scheduler(UEs);

// Run
    // Input
    cout << "Select Scheduler Mode: 1 = Round Robin || 2 = MaxCQI || 3 = Propotional Fair \n" << "Mode = " ;
    cin >> Scheduler_mode;
    // Algoritm Loop
    while(TTI < simTime)
    {
    //Check status and current TTI
        sleep(0.01);
    switch (Scheduler_mode)
    {
    case 1:
    // Roung Robin Scheduler
        scheduler.RR_scheduler();
        break;
    case 2:
    //MaxCQI Scheduler
        scheduler.MaxCQI_scheduler();
        break;
    case 3:
    //PF Scheduler    
        if(TTI < 3) scheduler.RR_scheduler();
        else scheduler.PF_scheduler();
        break;
    default:
        TTI = -1;
        cout << "Invalid Input! Please select scheduler mode: 1 = Round Robin || 2 = MaxCQI || 3 = Propotional Fair \n" << "Mode = " ; 
        cin >> Scheduler_mode;
        break;
    }
    

    // Print out info every 1s
        // if(TTI % 1000 == 0 && TTI > 0) {
        //     scheduler.print_allocation();
        //     cout << endl;
        // }
        
        TTI++;
    }
    scheduler.calculateCellDataRate();
    scheduler.print_allocation();
    return 0;
}